---
title: "Caracterización de árboles de algarrobo (Neltuma pallida) en localidades de las regiones Piura y Tumbes"
format:
  html:
    toc: true
    toc-location: left
    number-sections: true
    self-contained: true
    output-file: "ESM_1"
editor_options: 
  chunk_output_type: console
execute: 
  warning: false
  echo: true
---

# Project Setup

```{r}
#| label:  setup
library(corrplot)
library(multcomp)
library(factoextra)
library(corrplot)
library(gridGraphics)
library(dplyr)
library(textshape)
library(googlesheets4)
library(cluster)
library(vegan)
source('https://inkaverse.com/setup.r')

set.seed(2025)
cat("Project: ", getwd(), "\n")
session_info()
```

# Import data

The data were imported from the field book of the biological, dasometric, and phytosanitary evaluation of mesquite trees to identify the main pests and diseases associated with the genus *Neltuma*.

```{r}
url <- "https://docs.google.com/spreadsheets/d/19zJF9ti9AQhOCTenP6UqL0jA8Anl1s0r0ld-xzrR-PY/edit?gid=1347114226#gid=1347114226"

gs <- url %>% 
  as_sheets_id()

datos <- gs %>%
  range_read("total") %>%
  mutate(
    Forma_arbol_descripcion = case_when(
      Forma_arbol == 3 ~ "Single-stemmed trees",
      Forma_arbol == 2 ~ "Intermediate trees",
      Forma_arbol == 1 ~ "Multi-stemmed trees",
      TRUE ~ NA_character_
    ),
    Calidad_tronco_descripcion = case_when(
      Calidad_tronco == 3 ~ "High-quality tree, free of defects or with minimal defects",
      Calidad_tronco == 2 ~ "Moderate-quality tree with defects",
      Calidad_tronco == 1 ~ "Poor-quality tree with significant defects",
      TRUE ~ NA_character_
    ),
    Produccion_frutos_descripcion = case_when(
      Produccion_frutos == 4 ~ "Trees bearing fruit on 100% of branches",
      Produccion_frutos == 3 ~ "Trees bearing fruit on up to 75% of branches",
      Produccion_frutos == 2 ~ "Trees bearing fruit on up to 50% of branches",
      Produccion_frutos == 1 ~ "Trees bearing fruit on up to 25% of branches",
      Produccion_frutos == 0 ~ "Trees without fruit",
      TRUE ~ NA_character_
    ),
    Calidad_frutos_descripcion = case_when(
      Calidad_frutos == 3 ~ "Trees with very sweet fruit",
      Calidad_frutos == 2 ~ "Trees with sweet fruit",
      Calidad_frutos == 1 ~ "Trees with very bitter fruit",
      Calidad_frutos == 0 ~ "Trees with bitter fruit",
      TRUE ~ NA_character_
    ),
    Calidad_follaje_descripcion = case_when(
      Calidad_follaje == 3 ~ "Trees with foliage on all branches",
      Calidad_follaje == 2 ~ "Trees with foliage on up to two-thirds of branches",
      Calidad_follaje == 1 ~ "Trees with foliage on up to one-third of branches",
      TRUE ~ NA_character_
    ),
    Bifurcacion_descripcion = case_when(
      Bifurcacion == 3 ~ "No evidence of bifurcation",
      Bifurcacion == 2 ~ "Forked at breast height (DBH)",
      Bifurcacion == 1 ~ "Presence of bifurcation below breast height (DBH)",
      TRUE ~ NA_character_
    )
  ) %>%
  select(
    Individuo, Depart, Provincia, Distrito, Localidad, Estación, Cuenca,
    DAP, Diam_copa, Altura_ram, Altura_total, Num_ramas_XX,
    Forma_arbol, Forma_arbol_descripcion,
    Calidad_tronco, Calidad_tronco_descripcion,
    Produccion_frutos, Produccion_frutos_descripcion,
    Calidad_frutos, Calidad_frutos_descripcion,
    Calidad_follaje, Calidad_follaje_descripcion,
    Bifurcacion, Bifurcacion_descripcion,
    `fito_IIhEd _k`:Parasitos_XX, Carbonatos:Suelo
  ) %>%
  mutate(
    across(c(Individuo, Depart, Provincia, Distrito, Localidad, Estación, Cuenca), as.factor),
    across(c(Forma_arbol:Parasitos_XX, Suelo), as.factor)
  ) %>%
  rename(
    Individual = Individuo,
    Departament = Depart,
    Province = Provincia,
    District = Distrito,
    Locality = Localidad,
    Station = Estación,
    Basin = Cuenca,
    DBH = DAP,
    `Forking` = Bifurcacion,
    `Crown diameter` = Diam_copa,
    `Branch height` = Altura_ram,
    `Total height` = Altura_total,
    `Number of branches` = Num_ramas_XX,
    `Tree form` = Forma_arbol,
    `Tree form description` = Forma_arbol_descripcion,
    `Trunk quality` = Calidad_tronco,
    `Trunk quality description` = Calidad_tronco_descripcion,
    `Fruit production` = Produccion_frutos,
    `Fruit production description` = Produccion_frutos_descripcion,
    `Fruit quality` = Calidad_frutos,
    `Fruit quality description` = Calidad_frutos_descripcion,
    `Foliage quality` = Calidad_follaje,
    `Foliage quality description` = Calidad_follaje_descripcion,
    `Forking description` = Bifurcacion_descripcion
  )

names(datos)

str(datos)

summary(datos)

data_variables <- datos %>%
  select(
    Individual, Departament, Province, District, Locality, Station, Basin,
    DBH:`Total height`,
    `Tree form`,
    `Trunk quality`,
    `Fruit production`,
    `Fruit quality`,
    `Foliage quality`,
    Forking,
    `fito_IIhEd _k`:Parasitos_XX,
    Carbonatos:pH
  )

str(data_variables)

data_coordenadas <- gs %>%
  range_read("total") %>%
  select(
   Individuo, Departamento = "Depart", Provincia,
   Distrito, Localidad, Estación, Cuenca, UTM_X,UTM_Y, UTM_E_suelo,
   UTM_N_suelo) 

str(data_coordenadas)
```

```{r}
datos %>% kable(caption = "Evaluation of mesquite trees", align = 'c')

data_coordenadas %>% kable(caption = "Location of mesquite trees", align = 'c')
```

# Data summary

Descriptive statistics of the variables evaluated.

```{r}
# sm <- data_variables %>% 
#   group_by(Departamento) %>% 
#   summarise(across(DAP:pH, ~ sum(!is.na(.))))
# 
# sm
# 
# descriptive_numerics <- data_variables %>% 
#   dlookr::describe() %>% 
#   select(Variables = "described_variables", n:kurtosis, min = "p00", q1 = "p25", 
#          median = "p50", q3 = "p75", max = "p100")
# 
# descriptive_numerics
# 
# data_variables %>% 
#   dlookr::plot_hist_numeric()
# 
# data_variables %>% 
#   group_by(Departamento) %>% 
#   dlookr::plot_box_numeric()
# 
# data_variables %>% 
#   dlookr::plot_qq_numeric()
# 
# descriptive_categoricals <- data_variables %>% 
#   dlookr::diagnose_category() %>% 
#   select(-rank)
# 
# descriptive_categoricals
#   
# dlookr::plot_bar_category(data_variables)
```

# Multivariate

## Principal Component Analysis (PCA)

Principal Component Analysis (PCA). Results of the contributions and correlation of the variables in the Principal Component Analysis (PCA).

```{r}
mv <- data_variables %>%
  group_by(Locality) %>%
  select(Carbonatos:pH) %>%
  summarise(across(where(is.numeric), mean, na.rm = TRUE)) %>% 
  rename(
    Carbonates = Carbonatos,
    EC = CE,
    Phosphorus = Fosforo,
    `Organic matter` = Mat_Org,
    Nitrogen = Nitrogeno,
    Potassium = Potasio,
  )

str(mv)

pca <- mv %>%
  PCA(scale.unit = T, quali.sup = 1, graph = F)

# summary

summary(pca, nbelements = Inf, nb.dec = 2)

f1a <- plot.PCA(x = pca, choix = "var"
                , cex=0.8
                , label = "var"
                )

f1b <- plot.PCA(x = pca, choix = "ind"
                , habillage = 1
                , invisible = c("ind")
                , cex=0.8
                , ylim = c(-3,4)
                , col.hab = c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",
                         "#FFFF33", "#A65628", "#F781BF", "#999999", "#66C2A5",
                         "#FC8D62", "#8DA0CB", "#E78AC3")
                )

```

### Figure 1

Principal Component Analysis (PCA). Results of the contributions and correlation of the variables in the Principal Component Analysis (PCA).

```{r}
var <- get_pca_var(pca)

pt1 <- fviz_eig(pca, 
                addlabels=TRUE,
                hjust = 0.05,
                barfill="white",
                barcolor ="darkblue",
                linecolor ="red") + 
  ylim(0, 80) + 
  labs(
    title = "PCA - percentage of explained variances",
    y = "Variance (%)") +
  theme_minimal()

pt2 <- fviz_contrib(pca,
                     choice = "var", 
                     axes = 1, 
                     top = 10,
                     fill="white",
                     color ="darkblue",
                     sort.val = "desc") +
  ylim(0, 20) + 
  labs(title = "Dim 1 - variables contribution") 

pt3 <- fviz_contrib(pca,
                     choice = "var", 
                     axes = 2, 
                     top = 10,
                     fill="white",
                     color ="darkblue",
                     sort.val = "desc") +
  ylim(0, 60) + 
  labs(title = "Dim 2 - variables contribution") 

pt4 <- function() {

  corrplot(var$cor,
         method="number",
         tl.col="black",
         tl.srt=45,)

}
# Construcción del grid

fila1 <- plot_grid(f1a, f1b, ncol = 2, labels = "auto", rel_widths = c(1, 1.15))

columna_c <- plot_grid(pt1, pt2, pt3, ncol = 1, labels = "c")

fila2 <- plot_grid(columna_c, pt4, ncol = 2, labels = c("", "d"), rel_widths = c(1, 1.3))

grid_final <- plot_grid(fila1, fila2, ncol = 1, rel_heights = c(1, 1.2))

ggsave2(plot = grid_final, "submission/Figure_1a.jpg", height = 30, width = 28, units = "cm")

ggsave2(plot = grid_final, "submission/Figure_1a.eps", height = 30, width = 28, units = "cm")

knitr::include_graphics("submission/Figure_1a.jpg")
```

# Shannon–Weaver diversity index (H′)

```{r}
h <- datos %>% 
  select('Tree form description','Trunk quality description',
         'Fruit production description',
         'Fruit quality description',
         'Foliage quality description',
         'Forking description')

variables <- c('Tree form description','Trunk quality description',
         'Fruit production description',
         'Fruit quality description',
         'Foliage quality description',
         'Forking description')

# Crear lista vacía para guardar resultados
resultados <- list()

for (var in variables) {
  # Tabla de frecuencia
  freq_table <- as.data.frame(table(datos[[var]]))
  colnames(freq_table) <- c("State", "Frequency")
  
  # Calcular proporción
  freq_table$Proportion <- round((freq_table$Frequency / sum(freq_table$Frequency)) * 100, 2)
  
  # Índice de Shannon
  H <- diversity(freq_table$Frequency, index = "shannon")
  
  # Añadir variable y valor del índice a la tabla
  freq_table <- freq_table %>%
    mutate(Qualitative_trait = var,
           Shannon_Weaver_index = round(H, 2)) %>%
    select(Qualitative_trait, Shannon_Weaver_index, everything())
  
  # Guardar
  resultados[[var]] <- freq_table
}

# Unir todo en una sola tabla
tabla_shannon <- bind_rows(resultados)

tabla_shannon %>% kable(align = 'c')

# tabla_shannon %>%
#   write_sheet(ss = gs, sheet = "shanon_index")
```

## Cluster Analysis

```{r}
mv <- data_variables %>%
  mutate(across(`Tree form`:Parasitos_XX, as.numeric)) %>%
  group_by(Locality) %>%
  select(-`fito_IIhEd _k`:-Parasitos_XX,
         -`Branch height`, -Forking, -Basin, -Station,
         -Individual:-Locality,
         -Carbonatos:-pH) %>%
  summarise(across(where(is.numeric), mean, na.rm = TRUE))

str(data_variables)

mv1 <- mv %>% 
  textshape::column_to_rownames(., loc = 1)

data_clust <- scale(mv1)

m_distancia <- get_dist(data_clust, method = "euclidean")

fviz_nbclust(data_clust, pam, method = "silhouette")

pm <- pam(data_clust,4)

res <- hcut(m_distancia, k = 4, stand = TRUE, method = "median")

fig <- fviz_dend(res, rect = TRUE, cex = 0.59,
                 main = NULL,
                 ylab = "Similarity",
                 type = "circular",
                 repel = T,
                 ggtheme = theme_void())+
    theme(axis.text = element_blank(),  # quita los números del eje
        axis.ticks = element_blank(), 
        axis.title.y = element_blank())

fig %>% 
  ggsave2(plot = ., "submission/Figure_1.jpg", units = "cm"
         , width = 18, height = 15)

fig %>% 
  ggsave2(plot = ., "submission/Figure_1.eps", units = "cm"
         , width = 18, height = 15)

knitr::include_graphics("submission/Figure_1.jpg")
```

# Traits distribution by population

```{r}
data_dist <- data_variables %>%
  select(-Individual:-District, -Station:-Basin, -`fito_IIhEd _k`:-Parasitos_XX, -Carbonatos:-pH)

# Pivotear datos

data_long <- data_dist %>%
  pivot_longer(
    cols = c(DBH, 'Crown diameter', 'Branch height', 'Total height'), 
    names_to = "Variable",
    values_to = "Valor"
  )

p1 <- data_long %>%
  filter(Variable == "DBH") %>% 
  ggplot(aes(x = Locality, y = Valor, fill = Locality)) +
  stat_boxplot(geom = "errorbar", width = 0.5, position = position_dodge(0.8)) +
  geom_boxplot(width = 0.5, position = position_dodge(0.8)) +
  geom_jitter(position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.8),
              shape = 21, size = 1.8, alpha = 0.6, color = "black") +
  theme_minimal() +
    theme(
    panel.border = element_rect(colour = "black", fill = NA, linewidth = 0.5),
    panel.background = element_blank()
  ) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "none"
  ) +
  labs(x = "", y = "DBH (cm)") +
  scale_y_continuous(limits = c(0, 160))

  # geom_violin(trim = FALSE, alpha = 0.5) +
  # geom_boxplot(width = 0.1, outlier.shape = NA) +
  # theme_minimal() +
  # theme(
  #   axis.text.x = element_text(angle = 45, hjust = 1),
  #   legend.position = "none"
  # ) +
  # labs(x = "", y = "DBH")

p2 <- data_long %>%
  filter(Variable == "Crown diameter") %>%
  ggplot(aes(x = Locality, y = Valor, fill = Locality)) +
  stat_boxplot(geom = "errorbar", width = 0.5, position = position_dodge(0.8)) +
  geom_boxplot(width = 0.5, position = position_dodge(0.8)) +
  geom_jitter(position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.8),
              shape = 21, size = 1.8, alpha = 0.6, color = "black") +
  theme_minimal() +
    theme(
    panel.border = element_rect(colour = "black", fill = NA, linewidth = 0.5),
    panel.background = element_blank()
  ) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "none"
  ) +
  labs(x = "", y = "Crown diameter (m)")

p3 <- data_long %>%
  filter(Variable == "Branch height") %>%
  ggplot(aes(x = Locality, y = Valor, fill = Locality)) +
  stat_boxplot(geom = "errorbar", width = 0.5, position = position_dodge(0.8)) +
  geom_boxplot(width = 0.5, position = position_dodge(0.8)) +
  geom_jitter(position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.8),
              shape = 21, size = 1.8, alpha = 0.6, color = "black") +
  theme_minimal() +
    theme(
    panel.border = element_rect(colour = "black", fill = NA, linewidth = 0.5),
    panel.background = element_blank()
  ) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "none"
  ) +
  labs(x = "", y = "Branch height (m)")

p4 <- data_long %>%
  filter(Variable == "Total height") %>%
  ggplot(aes(x = Locality, y = Valor, fill = Locality)) +
  stat_boxplot(geom = "errorbar", width = 0.5, position = position_dodge(0.8)) +
  geom_boxplot(width = 0.5, position = position_dodge(0.8)) +
  geom_jitter(position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.8),
              shape = 21, size = 1.8, alpha = 0.6, color = "black") +
  theme_minimal() +
    theme(
    panel.border = element_rect(colour = "black", fill = NA, linewidth = 0.5),
    panel.background = element_blank()
  ) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "none"
  ) +
  labs(x = "", y = "Total height (m)") +
  scale_y_continuous(limits = c(0, 30))
```

## Figure 2

```{r}
fig <- list(p1 + labs(x = NULL) + theme(legend.position="none"
                                        , axis.title.x=element_blank()
                                        , axis.text.x=element_blank()
                                        , axis.ticks.x=element_blank())
           , p4 + labs(x = NULL) + theme(legend.position="none"
                                        , axis.title.x=element_blank()
                                        , axis.text.x=element_blank()
                                        , axis.ticks.x=element_blank())
           , p2 + theme(legend.position="none")
           , p3 + theme(legend.position="none")
           ) %>% 
  plot_grid(plotlist = ., ncol = 2
            , labels = "auto"
            ,align = 'v', rel_heights = c(1, 1.1)) 

fig %>% 
  ggsave2(plot = ., "submission/Figure_2.jpg", units = "cm"
         , width = 30, height = 26)

fig %>% 
  ggsave2(plot = ., "submission/Figure_2.eps", units = "cm"
         , width = 30, height = 26)

knitr::include_graphics("submission/Figure_2.jpg")
```

# Broad-sense heritability

```{r}
data_variables %>% names()
data_variables %>% str()

#> sebas no te olvides de limpiar las cabeceras siempre

h2d <- data_variables %>% 
  dplyr::select(1:'Foliage quality') %>% 
  mutate(across(1:Basin, ~ as.factor(.))) %>%
  mutate(across(DBH:length(.), ~ as.numeric(.))) %>% 
  rename_with(~tolower(.)) %>% # poner en minusculas
  rename_with(~iconv(x = ., to = "ASCII//TRANSLIT")) %>% # quitar todos las letras extrañas 
  rename(
    crown_diameter = `crown diameter`,
    branch_height = `branch height`,
    total_height = `total height`,
    tree_form = `tree form`,
    trunk_quality = `trunk quality`,
    fruit_production = `fruit production`,
    fruit_quality = `fruit quality`,
    foliage_quality = `foliage quality`,
  )

str(h2d)

names(h2d)

group <- "departament"

mgroup <- h2d %>% 
  dplyr::select({{group}}) %>% 
  unique() %>% 
  deframe() %>% as.vector()

rslt <- 1:length(mgroup) %>% map(\(a) {

  npop <- mgroup[a]

  cat("\n#>", npop)

  gpop <- h2d %>%
    filter(.[[group]] %in% {{npop}}) %>%
    dplyr::select(!c(fruit_quality, foliage_quality)) # al parecer no tiene variabilidad

  # str(gpop)

  nvar <- match("dbh", names(gpop))

  groups <- nvar:length(gpop) %>% map(\(b) {

    trait <- names(gpop)[b]

    cat("\n#>", trait)

    gpop %>%
       H2cal(data = .
        , trait = trait
        , gen.name = "locality"
        , rep.n = 8 # maximo valor de n localidades
        , fixed.model = "0 + (1|province) + locality"
        , random.model = "1 + (1|province) + (1|locality)"
        , emmeans = FALSE
        , plot_diag = TRUE
        , outliers.rm = TRUE
        , trial = npop
        )
  })
})

h2tab <- 1:length(rslt) %>% map(\(x) {

  nlst <- rslt[[x]]

  1:length(nlst) %>% map(\(z) {
      rslt[[x]][[z]][["tabsmr"]]
    })
  }) %>%
  bind_rows() %>%
  rename(Trait = trait, Heritability = H2.s, Population = trial, Localities = geno) %>%
  dplyr::select(!matches("H2|rep|env|year"))


h2tab %>% kable(caption = "Variance component table")


h2blues <- 1:length(rslt) %>% map(\(x) {

  nlst <- rslt[[x]]

  1:length(nlst) %>% map(\(z) {
      rslt[[x]][[z]][["blues"]] %>%
      dplyr::select(!smith.w) %>%
      pivot_longer(!c(trial, locality), names_to = "trait")
    })
  })  %>%
  bind_rows() %>%
  ungroup() %>%
  group_by(trait) %>%
  arrange(desc(value), .by_group = T)

h2blues %>% kable(caption = "BLUEs")

# h2tab %>%
#   write_sheet(ss = gs, sheet = "h2tab")
```

# Multivariate

## Principal Component Analysis (PCA)

Principal Component Analysis (PCA). Results of the contributions and correlation of the variables in the Principal Component Analysis (PCA).

```{r}
mv <- data_variables %>%
  mutate(across(`Tree form`:Parasitos_XX, as.numeric)) %>% 
  select(DBH:`Forking`)

str(mv)

pca <- mv %>%
  PCA(scale.unit = T, graph = F)

# summary

summary(pca, nbelements = Inf, nb.dec = 2)

f5a <- fviz_pca_var(pca,
             # col.var = "contrib", # Color by contributions to the PC
             # gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
             title = "PCA graph of variables",
             repel = TRUE,     # Avoid text overlapping
)

grupo <- as.factor(datos$Locality)

f5b <- fviz_pca_ind(pca,
                axes = c(1,2),
                col.ind = grupo,
                legend.title = "Stations",
                geom.ind = "point",
                title = "PCA graph of individuals",
                repel = FALSE
)

# data_pca <- data_variables %>% 
#       mutate(across(c(Forma_arbol:Parasitos_XX), as.numeric)) %>% 
#       select(-(Individuo:Cuenca)) %>% 
#       select(-(`fito_IIhEd _k`:Parasitos_XX)) %>%
#       select(-c(Altura_ram, Bifurcacion))
#       # textshape::column_to_rownames(., loc = 1)
# 
# str(data_pca)
# 
# res.pca <- PCA(mv = data_pca, scale.unit = T, graph = F)
# 
# summary(res.pca)
# 
# fviz_screeplot(res.pca)
# 
# fviz_pca_var(res.pca,
#              col.var = "contrib", # Color by contributions to the PC
#              gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
#              repel = TRUE     # Avoid text overlapping
# )
# 
# grupo <- as.factor(datos$Localidad)
# 
# p1 <- fviz_pca_biplot(pca,
#                 axes = c(1,2),
#                 # col.ind = grupo,
#                 legend.title = "Estaciones",
#                 geom.ind = "point",
#                 repel = FALSE
# ) +
# theme(
#     legend.position = "bottom",        # Leyenda abajo
#     legend.justification = "center",   # Centra la leyenda
#     legend.direction = "horizontal"    # Distribuye los elementos horizontalmente
#   ) +
#   guides(color = guide_legend(nrow = 1))
```

### Figure 5

Principal Component Analysis (PCA). Results of the contributions and correlation of the variables in the Principal Component Analysis (PCA).

```{r}
fig <- list(f5a, f5b) %>% 
  plot_grid(plotlist = ., ncol = 2, nrow = 1
            , labels = "auto"
            , rel_widths = c(1.1, 1.5)
            )
fig %>% 
  ggsave2(plot = ., "submission/Figure_4.jpg", units = "cm"
         , width = 28
         , height = 12
         )
fig %>% 
  ggsave2(plot = ., "submission/Figure_4.eps", units = "cm"
         , width = 28
         , height = 12
         )

knitr::include_graphics("submission/Figure_4.jpg")
```

